USE master
DROP DATABASE APUESTAS
CREATE DATABASE APUESTAS
GO
USE APUESTAS
GO

CREATE TABLE USUARIOS (
	NOMBRE VARCHAR(40) PRIMARY KEY,
	EMAIL VARCHAR(100) UNIQUE,
	CONTRASENA VARCHAR(30) NOT NULL,
	SALDO SMALLMONEY DEFAULT 0 NOT NULL,
	CONSTRAINT US_SALDO_POSITIVO CHECK(SALDO>=0)
)
GO

CREATE TABLE TRANSACCIONES (
	ID SMALLINT IDENTITY(1,1) PRIMARY KEY,
	NOMBRE_USUARIO VARCHAR(40) REFERENCES USUARIOS ON DELETE CASCADE,
	FECHA DATETIME DEFAULT (GETDATE()),
	IMPORTE SMALLMONEY CHECK(IMPORTE != 0)
)
GO

CREATE TABLE COMBATES (
	ID SMALLINT IDENTITY(1,1) PRIMARY KEY,
	FECHA_INICIO SMALLDATETIME NOT NULL,
	FECHA_FIN SMALLDATETIME NOT NULL,
	ADMITE_APUESTAS BIT DEFAULT 0 NOT NULL,
	MAX_APUESTAS_POR_GANADOR SMALLMONEY NOT NULL CHECK(MAX_APUESTAS_POR_GANADOR >=0),
	MAX_APUESTAS_POR_TIPO_VICTORIA SMALLMONEY NOT NULL CHECK(MAX_APUESTAS_POR_TIPO_VICTORIA >=0),
	MAX_APUESTAS_POR_PUNTUACION SMALLMONEY NOT NULL CHECK(MAX_APUESTAS_POR_PUNTUACION >=0),
	CONSTRAINT CK_FECHA_COMBATES CHECK(FECHA_INICIO < FECHA_FIN)
)
GO

CREATE TABLE BOXEADORES(
	NOMBRE VARCHAR(50) PRIMARY KEY
)
GO

CREATE TABLE APUESTAS(
	ID SMALLINT IDENTITY(1,1) PRIMARY KEY,
	NOMBRE_USUARIO VARCHAR(40) REFERENCES USUARIOS,
	ID_COMBATE SMALLINT REFERENCES COMBATES ON DELETE CASCADE,
	CANTIDAD SMALLMONEY NOT NULL CHECK(CANTIDAD > 0),
	FECHA DATE DEFAULT CURRENT_TIMESTAMP NOT NULL,
	CUOTA NUMERIC CHECK(CUOTA > 0),
	SE_HA_RESUELTO BIT DEFAULT 0 NOT NULL,
	CONSTRAINT UN_APUESTAS UNIQUE(NOMBRE_USUARIO, ID_COMBATE)
)
GO

CREATE TABLE APUESTAS_POR_GANADOR(
	ID_APUESTA SMALLINT REFERENCES APUESTAS ON DELETE CASCADE PRIMARY KEY,
	NOMBRE_GANADOR VARCHAR(50) REFERENCES BOXEADORES ON DELETE CASCADE
)
GO

CREATE TABLE APUESTAS_POR_PUNTUACION(
	ID_APUESTA SMALLINT REFERENCES APUESTAS ON DELETE CASCADE PRIMARY KEY,
	PUNTUACION SMALLINT NOT NULL
)
GO

CREATE TABLE APUESTAS_POR_TIPO_DE_VICTORIA(
	ID_APUESTA SMALLINT REFERENCES APUESTAS ON DELETE CASCADE PRIMARY KEY,
	TIPO_DE_VICTORIA VARCHAR(20) NOT NULL
)
GO

CREATE TABLE COMPETICIONES(
	ID SMALLINT IDENTITY(1,1) PRIMARY KEY,
	ID_COMBATE SMALLINT REFERENCES COMBATES ON DELETE CASCADE,
	NOMBRE_BOXEADOR VARCHAR(50) REFERENCES BOXEADORES ON DELETE SET NULL,
	CONSTRAINT UN_COMPETICIONES UNIQUE(ID_COMBATE,NOMBRE_BOXEADOR)
)
GO

CREATE TABLE PUNTUACIONES(
	ID_COMPETICION SMALLINT REFERENCES COMPETICIONES ON DELETE CASCADE,
	RONDA SMALLINT CHECK(RONDA>0),
	PUNTUACION SMALLINT NOT NULL CHECK(PUNTUACION>=0),
	CONSTRAINT PK_PUNTUACIONES PRIMARY KEY(ID_COMPETICION, RONDA)
)
GO

--Esta vista recoge la ID de cada apuesta con una cadena que indica el tipo de apuesta que es
CREATE VIEW ApuestaTipo (ID, TIPO) AS (
	(SELECT APUESTAS.ID, 'Ganador' FROM APUESTAS
	JOIN APUESTAS_POR_GANADOR ON APUESTAS.ID = APUESTAS_POR_GANADOR.ID_APUESTA)
	UNION
	(SELECT APUESTAS.ID,'Tipo' FROM APUESTAS
	JOIN APUESTAS_POR_TIPO_DE_VICTORIA ON APUESTAS.ID = APUESTAS_POR_TIPO_DE_VICTORIA.ID_APUESTA)
	UNION
	(SELECT APUESTAS.ID,'Puntuacion' FROM APUESTAS
	JOIN APUESTAS_POR_PUNTUACION ON APUESTAS.ID = APUESTAS_POR_PUNTUACION.ID_APUESTA)
)
GO

--Cuando se modifica el saldo de un usuario, este trigger emite una transacción con la información pertinente en la tabla TRANSACCIONES.
CREATE TRIGGER CREAR_TRANSACCION
	ON USUARIOS
	AFTER UPDATE
	AS
	BEGIN
		INSERT INTO TRANSACCIONES (NOMBRE_USUARIO, IMPORTE)
		SELECT inserted.NOMBRE, inserted.SALDO - deleted.SALDO
			FROM inserted JOIN deleted ON inserted.NOMBRE = deleted.NOMBRE
			WHERE inserted.SALDO != deleted.SALDO
	END
GO

--Cuando se realiza una apuesta. Este trigger actualiza el saldo del usuario tras realizar la apuesta.
CREATE TRIGGER QUITAR_SALDO_APUESTA
	ON APUESTAS
	AFTER INSERT
	AS
	BEGIN
		UPDATE USUARIOS
		SET SALDO = SALDO - (SELECT SUM(CANTIDAD) FROM inserted WHERE NOMBRE_USUARIO = NOMBRE)
		WHERE NOMBRE IN (SELECT NOMBRE_USUARIO FROM inserted)
	END
GO

--Este trigger impide la modificación o borrado en la tabla APUESTAS
CREATE TRIGGER IMPEDIR_CAMBIAR_APUESTA
	ON APUESTAS
	AFTER UPDATE, DELETE
	AS BEGIN
		THROW 51001, 'No se puede modificar ni eliminar una apuesta una vez formalizada', 1
	END
GO

--Estos tres próximos triggers se encargan de preservar la exclusividad de la generalización de APUESTA con sus subentidades.
CREATE TRIGGER ASEGURAR_GENERALIZACION_CORRECTA_GANADOR
	ON APUESTAS_POR_GANADOR
	AFTER INSERT
	AS BEGIN
		IF(EXISTS(
		SELECT * FROM ApuestaTipo
		INNER JOIN inserted ON ApuestaTipo.ID = inserted.ID_APUESTA
		GROUP BY ID
		HAVING COUNT(*) > 1))
			THROW 51001, 'Una apuesta solo puede ser de un solo tipo', 1
	END
GO

CREATE TRIGGER ASEGURAR_GENERALIZACION_CORRECTA_PUNTUACION
	ON APUESTAS_POR_PUNTUACION
	AFTER INSERT
	AS BEGIN
		IF(EXISTS(
		SELECT * FROM ApuestaTipo
		INNER JOIN inserted ON ApuestaTipo.ID = inserted.ID_APUESTA
		GROUP BY ID
		HAVING COUNT(*) > 1))
			THROW 51001, 'Una apuesta solo puede ser de un solo tipo', 1
	END
GO

CREATE TRIGGER ASEGURAR_GENERALIZACION_CORRECTA_TIPO
	ON APUESTAS_POR_TIPO_DE_VICTORIA
	AFTER INSERT
	AS BEGIN
		IF(EXISTS(
		SELECT * FROM ApuestaTipo
		INNER JOIN inserted ON ApuestaTipo.ID = inserted.ID_APUESTA
		GROUP BY ID
		HAVING COUNT(*) > 1))
			THROW 51001, 'Una apuesta solo puede ser de un solo tipo', 1
	END
GO

--El trigger evalua si las entradas en inserted se corresponden con combates y que esos combates tengan el atributo Admite_Apuestas en 1
--En caso contrario lanza una excepcion 
CREATE TRIGGER ApuestaAbierta ON APUESTAS 
	AFTER INSERT AS 
    BEGIN
        IF EXISTS (
            SELECT *
            FROM inserted
                INNER JOIN COMBATES
                    ON inserted.ID_COMBATE = COMBATES.ID
            WHERE COMBATES.ADMITE_APUESTAS = 0
        )
            BEGIN
                THROW 510053, 'No se puede apostar sobre un combate que ya no admite apuestas', 1
            END
    END
GO

--Esta función devuelve un varchar con el tipo de victoria de un combate.
CREATE FUNCTION TIPO_VICTORIA (@ID_COMBATE SMALLINT) RETURNS VARCHAR(50)
	AS BEGIN
		DECLARE @tipoVictoria varchar(10)
		IF(EXISTS(
			SELECT *
			FROM PUNTUACIONES
				INNER JOIN COMPETICIONES ON PUNTUACIONES.ID_COMPETICION = COMPETICIONES.ID
			WHERE COMPETICIONES.ID_COMBATE = @ID_COMBATE
				AND PUNTUACIONES.PUNTUACION = 0
		))
			SET @tipoVictoria = 'KO'
		ELSE
			SET @tipoVictoria = 'PUNTUACION'


		RETURN @tipoVictoria
	END
GO

--LOS 3 próximos triggers se encargan de asegurar que no se sobrepasa el límite de dinero establecido para cada tipo de apuesta
--Nota: Se asume cuota como un multiplicador de la cantidad, que da como producto el total a pagar al apostante. Un número superior a 1.
--De tal manera que TOTAL-A-PAGAR = CUOTA * CANTIDAD
GO
CREATE TRIGGER ApuestaLimiteGanador ON APUESTAS_POR_GANADOR
	AFTER INSERT AS
    BEGIN
            ALTER TABLE APUESTAS DISABLE TRIGGER IMPEDIR_CAMBIAR_APUESTA
            --cursor sobre inserted
            DECLARE cursorApuestas CURSOR FOR (
            SELECT ID_APUESTA,NOMBRE_GANADOR, APUESTAS.ID_COMBATE FROM inserted
            INNER JOIN APUESTAS ON APUESTAS.ID = inserted.ID_APUESTA
            )
            OPEN cursorApuestas

            DECLARE @identificador smallint
            DECLARE @nombreGanador varchar(50)
            DECLARE @idCombate  smallint
            DECLARE @excepcion bit = 0

            FETCH NEXT FROM cursorApuestas
            INTO @identificador, @nombreGanador, @idCombate

            WHILE @@FETCH_STATUS = 0
            BEGIN
                IF (EXISTS(SELECT SUM(AP.CANTIDAD * AP.CUOTA)
                FROM APUESTAS AS AP
                INNER JOIN COMBATES AS CO
                    ON CO.ID = AP.ID_COMBATE
                INNER JOIN APUESTAS_POR_GANADOR AS AP_G
                    ON AP.ID = AP_G.ID_APUESTA
                WHERE
                    AP_G.NOMBRE_GANADOR = @nombreGanador AND AP.ID_COMBATE = @idCombate
                GROUP BY
                    AP.ID_COMBATE, CO.MAX_APUESTAS_POR_GANADOR, AP_G.NOMBRE_GANADOR
                HAVING

                    SUM(AP.CANTIDAD * AP.CUOTA) > CO.MAX_APUESTAS_POR_GANADOR

                ))
                    BEGIN
                        DELETE FROM APUESTAS WHERE APUESTAS.ID = @identificador
                        SET @excepcion = 1
                    END
                FETCH NEXT FROM cursorApuestas
                INTO @identificador, @nombreGanador, @idCombate
            END

            CLOSE cursorApuestas;
            DEALLOCATE cursorApuestas;

            ALTER TABLE APUESTAS ENABLE TRIGGER IMPEDIR_CAMBIAR_APUESTA

    END
GO

CREATE TRIGGER ApuestaLimitePuntuacion ON APUESTAS_POR_PUNTUACION
	AFTER INSERT AS
    BEGIN
        ALTER TABLE APUESTAS DISABLE TRIGGER IMPEDIR_CAMBIAR_APUESTA
        --cursor sobre inserted
        DECLARE cursorApuestas CURSOR FOR (
        SELECT ID_APUESTA,PUNTUACION, APUESTAS.ID_COMBATE FROM inserted
        INNER JOIN APUESTAS ON APUESTAS.ID = inserted.ID_APUESTA
        )
        OPEN cursorApuestas

        DECLARE @identificador smallint
        DECLARE @puntuacion varchar(50)
        DECLARE @idCombate  smallint
        DECLARE @excepcion bit = 0

        FETCH NEXT FROM cursorApuestas
        INTO @identificador, @puntuacion, @idCombate

        WHILE @@FETCH_STATUS = 0
        BEGIN
            IF (EXISTS(SELECT SUM(AP.CANTIDAD * AP.CUOTA)
            FROM APUESTAS AS AP
            INNER JOIN COMBATES AS CO
                ON CO.ID = AP.ID_COMBATE
            INNER JOIN APUESTAS_POR_PUNTUACION AS AP_P
                ON AP.ID = AP_P.ID_APUESTA
            WHERE
                AP_P.PUNTUACION = @puntuacion AND AP.ID_COMBATE = @idCombate
            GROUP BY
                AP.ID_COMBATE, CO.MAX_APUESTAS_POR_PUNTUACION, AP_P.PUNTUACION
            HAVING

                SUM(AP.CANTIDAD * AP.CUOTA) > CO.MAX_APUESTAS_POR_PUNTUACION

            ))
                BEGIN
                    DELETE FROM APUESTAS WHERE APUESTAS.ID = @identificador
                    SET @excepcion = 1
                END
            FETCH NEXT FROM cursorApuestas
            INTO @identificador, @puntuacion, @idCombate
        END

        CLOSE cursorApuestas;
        DEALLOCATE cursorApuestas;

        ALTER TABLE APUESTAS ENABLE TRIGGER IMPEDIR_CAMBIAR_APUESTA
    END
GO

CREATE TRIGGER ApuestaLimiteTipoVictoria ON APUESTAS_POR_TIPO_DE_VICTORIA
	AFTER INSERT AS
    BEGIN
		ALTER TABLE APUESTAS DISABLE TRIGGER IMPEDIR_CAMBIAR_APUESTA
		--cursor sobre inserted
		DECLARE cursorApuestas CURSOR FOR (
		SELECT ID_APUESTA,TIPO_DE_VICTORIA, APUESTAS.ID_COMBATE FROM inserted
		INNER JOIN APUESTAS ON APUESTAS.ID = inserted.ID_APUESTA
		)
		OPEN cursorApuestas

		DECLARE @identificador smallint
		DECLARE @tipoVictoria varchar(50)
		DECLARE @idCombate  smallint
		DECLARE @excepcion bit = 0
		
		FETCH NEXT FROM cursorApuestas
		INTO @identificador, @tipoVictoria, @idCombate
		
		WHILE @@FETCH_STATUS = 0  
		BEGIN    
			IF (EXISTS(SELECT SUM(AP.CANTIDAD * AP.CUOTA)
			FROM APUESTAS AS AP
			INNER JOIN COMBATES AS CO
				ON CO.ID = AP.ID_COMBATE
			INNER JOIN APUESTAS_POR_TIPO_DE_VICTORIA AS AP_T
				ON AP.ID = AP_T.ID_APUESTA
			WHERE
				AP_T.TIPO_DE_VICTORIA = @tipoVictoria AND AP.ID_COMBATE = @idCombate  
			GROUP BY
				AP.ID_COMBATE, CO.MAX_APUESTAS_POR_TIPO_VICTORIA, AP_T.TIPO_DE_VICTORIA
			HAVING
				SUM(AP.CANTIDAD * AP.CUOTA) > CO.MAX_APUESTAS_POR_TIPO_VICTORIA

			))
				BEGIN
					DELETE FROM APUESTAS WHERE APUESTAS.ID = @identificador
					SET @excepcion = 1
				END
			FETCH NEXT FROM cursorApuestas
			INTO @identificador, @tipoVictoria, @idCombate
		END  
  
		CLOSE cursorApuestas;  
		DEALLOCATE cursorApuestas;
		
		ALTER TABLE APUESTAS ENABLE TRIGGER IMPEDIR_CAMBIAR_APUESTA
    END
GO

--Este es el trigger que controla que no se añadan rondas a un combate desspués de que haya un knockout. 
--Se asume como knockout una ronda en la que un boxeador tenga puntuación 0 

CREATE TRIGGER ASEGURAR_NO_MAS_RONDAS_DESPUES_KNOCKOUT
	ON PUNTUACIONES AFTER INSERT
	AS BEGIN
		IF(EXISTS(
			SELECT *
			FROM COMBATES AS COMBATES_EXISTENTES
				INNER JOIN COMPETICIONES ON COMBATES_EXISTENTES.ID = COMPETICIONES.ID_COMBATE
				INNER JOIN PUNTUACIONES ON COMPETICIONES.ID = PUNTUACIONES.ID_COMPETICION
			WHERE EXISTS(
				SELECT *
				FROM COMBATES AS COMBATES_INSERTADOS
					INNER JOIN COMPETICIONES ON COMBATES_INSERTADOS.ID = COMPETICIONES.ID_COMBATE
					INNER JOIN inserted ON COMPETICIONES.ID = inserted.ID_COMPETICION
				WHERE COMBATES_EXISTENTES.ID = COMBATES_INSERTADOS.ID
					AND PUNTUACIONES.RONDA < inserted.RONDA
					AND PUNTUACIONES.PUNTUACION = 0
			))
		)
			BEGIN
				PRINT('No puede haber más rondas después de un knockout')
				ROLLBACK
			END
	END
GO

--La función que determina el ganador de un combate
CREATE FUNCTION GANADOR(@ID_COMBATE SMALLINT) RETURNS VARCHAR(50)
AS
BEGIN
	DECLARE @TIPO_VICTORIA VARCHAR(50) = dbo.TIPO_VICTORIA(@ID_COMBATE)
	DECLARE @GANADOR VARCHAR(50)

	IF(@TIPO_VICTORIA = 'KO')
		SELECT TOP 1 @GANADOR = NOMBRE
			FROM PUNTUACIONES
				INNER JOIN COMPETICIONES ON PUNTUACIONES.ID_COMPETICION = COMPETICIONES.ID
				INNER JOIN BOXEADORES ON BOXEADORES.NOMBRE = COMPETICIONES.NOMBRE_BOXEADOR
				INNER JOIN COMBATES ON COMBATES.ID = @ID_COMBATE
			WHERE PUNTUACION != 0
	ELSE
		SELECT TOP 1 @GANADOR = NOMBRE
			FROM PUNTUACIONES
				INNER JOIN COMPETICIONES ON PUNTUACIONES.ID_COMPETICION = COMPETICIONES.ID
				INNER JOIN BOXEADORES ON BOXEADORES.NOMBRE = COMPETICIONES.NOMBRE_BOXEADOR
				INNER JOIN COMBATES ON COMBATES.ID = @ID_COMBATE
			GROUP BY NOMBRE
			HAVING SUM(PUNTUACION) = 
				(SELECT MAX(SUMAS.SUMAPUNTUACIONES)
					FROM (
						SELECT SUM(PUNTUACIONES.PUNTUACION) AS SUMAPUNTUACIONES 
							FROM PUNTUACIONES
								INNER JOIN COMPETICIONES ON PUNTUACIONES.ID_COMPETICION = COMPETICIONES.ID
								INNER JOIN BOXEADORES ON BOXEADORES.NOMBRE = COMPETICIONES.NOMBRE_BOXEADOR
								INNER JOIN COMBATES ON COMBATES.ID = @ID_COMBATE
							GROUP BY NOMBRE
						) AS SUMAS
				)

	RETURN @GANADOR
END

GO

--Este trigger se encarga de cambiar el atributo SE_HA_RESUELTO de la tabla COMBATES (Este atributo booleano señala si el combate se ha acabado)
CREATE TRIGGER CERRAR_APUESTAS
ON COMBATES
AFTER UPDATE
AS BEGIN
	ALTER TABLE APUESTAS DISABLE TRIGGER IMPEDIR_CAMBIAR_APUESTA

	UPDATE APUESTAS
	SET SE_HA_RESUELTO = 1
	WHERE ID IN (
		SELECT APUESTAS.ID FROM APUESTAS
			INNER JOIN inserted
				ON inserted.id = APUESTAS.ID_COMBATE
			INNER JOIN deleted
				ON deleted.id = inserted.id
			WHERE inserted.ADMITE_APUESTAS = 0
				AND deleted.ADMITE_APUESTAS = 1
	)

	ALTER TABLE APUESTAS ENABLE TRIGGER IMPEDIR_CAMBIAR_APUESTA
END

GO

--Este trigger se encarga de pagar las apuestas cuando se hace un update a apuestas. Este update solo lo puede llevar a cabo el trigger CERRAR_APUESTAS (Detallado anteriormente)
--Hace uso de las funciones de RESULTADO_APUESTA
CREATE TRIGGER RESOLVER_APUESTA
ON APUESTAS
AFTER UPDATE
AS
	BEGIN
		UPDATE USUARIOS
			SET SALDO = SALDO + (
			SELECT COALESCE(SUM(INS.CANTIDAD * INS.CUOTA),0)
			FROM inserted AS INS
				INNER JOIN deleted AS DEL ON INS.ID = DEL.ID
			WHERE INS.NOMBRE_USUARIO = USUARIOS.NOMBRE
				AND dbo.RESULTADO_APUESTA(INS.ID) = 1
				AND INS.SE_HA_RESUELTO = 1
				AND DEL.SE_HA_RESUELTO = 0
			)
	END
GO

--Esta función se encarga de calcular si una apuesta específica  es ganadora. 
--Para ello llama a otras funciones (Detalladas a continuación de esta) específicas a cada tipo de apuesta.
CREATE FUNCTION RESULTADO_APUESTA (@ID_APUESTA SMALLINT)
	RETURNS INT
AS
	BEGIN
		DECLARE @HA_GANADO BIT
		DECLARE @TIPO VARCHAR(200)

		SELECT @TIPO = TIPO
			FROM ApuestaTipo
			WHERE ID = @ID_APUESTA

		IF(@TIPO = 'Ganador')
			SET @HA_GANADO = DBO.RESULTADO_APUESTA_POR_GANADOR(@ID_APUESTA)
		ELSE IF (@TIPO = 'Puntuacion')
			SET @HA_GANADO = DBO.RESULTADO_APUESTA_POR_PUNTUACION(@ID_APUESTA)
		ELSE
			SET @HA_GANADO = DBO.RESULTADO_APUESTA_POR_TIPO_DE_VICTORIA(@ID_APUESTA)

		RETURN @HA_GANADO
	END
GO

CREATE FUNCTION RESULTADO_APUESTA_POR_PUNTUACION (@ID_APUESTA SMALLINT)
	RETURNS BIT
AS
	BEGIN
		DECLARE @PUNTUACION_APOSTADA INT
		SELECT @PUNTUACION_APOSTADA = PUNTUACION
			FROM APUESTAS_POR_PUNTUACION
			WHERE ID_APUESTA = @ID_APUESTA

		DECLARE @HA_GANADO BIT

		IF(@PUNTUACION_APOSTADA IN(
			SELECT SUM(PT.PUNTUACION)
			FROM PUNTUACIONES AS PT
				INNER JOIN COMPETICIONES AS CP ON PT.ID_COMPETICION = CP.ID
				INNER JOIN COMBATES AS CB ON CB.ID = CP.ID_COMBATE
				INNER JOIN APUESTAS AS AP ON CB.ID = AP.ID_COMBATE
			WHERE AP.ID = @ID_APUESTA
			--WHERE CP.NOMBRE_BOXEADOR = dbo.GANADOR(CP.ID_COMBATE)
			GROUP BY CP.NOMBRE_BOXEADOR, CP.ID_COMBATE
		))
			SET @HA_GANADO = 1
		ELSE
			SET @HA_GANADO = 0

		RETURN @HA_GANADO
	END
GO

CREATE FUNCTION RESULTADO_APUESTA_POR_TIPO_DE_VICTORIA (@ID_APUESTA SMALLINT)
	RETURNS BIT
AS
	BEGIN
		DECLARE @TIPO_APOSTADO VARCHAR(200)
		SELECT @TIPO_APOSTADO = TIPO_DE_VICTORIA
			FROM APUESTAS_POR_TIPO_DE_VICTORIA
			WHERE ID_APUESTA = @ID_APUESTA

		DECLARE @TIPO_RESULTADO VARCHAR(200)
		SELECT @TIPO_RESULTADO = dbo.TIPO_VICTORIA(COMBATES.ID)
			FROM COMBATES
				INNER JOIN APUESTAS ON APUESTAS.ID_COMBATE = COMBATES.ID
			WHERE APUESTAS.ID = @ID_APUESTA

		DECLARE @HA_GANADO BIT

		IF(@TIPO_APOSTADO = @TIPO_RESULTADO)
			SET @HA_GANADO = 1
		ELSE
			SET @HA_GANADO = 0

		RETURN @HA_GANADO
	END
GO

CREATE FUNCTION RESULTADO_APUESTA_POR_GANADOR (@ID_APUESTA SMALLINT)
	RETURNS BIT
AS
	BEGIN
		DECLARE @GANADOR_APOSTADO VARCHAR(200)
		SELECT @GANADOR_APOSTADO = NOMBRE_GANADOR
			FROM APUESTAS_POR_GANADOR
			WHERE ID_APUESTA = @ID_APUESTA

		DECLARE @GANADOR_RESULTADO VARCHAR(200)
		SELECT @GANADOR_RESULTADO = dbo.GANADOR(COMBATES.ID)
			FROM COMBATES
				WHERE ID = @ID_APUESTA

		DECLARE @HA_GANADO BIT

		IF(@GANADOR_APOSTADO = @GANADOR_RESULTADO)
			SET @HA_GANADO = 1
		ELSE
			SET @HA_GANADO = 0

		RETURN @HA_GANADO
	END
GO

--Este trigger genera una cuota de apuesta aleatoria
--A riesgo de contradecir los requisitos, hemos decidido realizar la asignación de la cuota mediante este trigger en lugar de con un función escalar
--El razonamiento es que el modelo actual no abarca muchos factores que podrían ser de peso a la hora de calcular la dificultad de una apuesta
--Por tanto, hemos preferido que este juicio se realice sujbetiva y manualmente en el momento en que se vaya a realizar la inserción, otorgando
--un valor inicial a la cuota y permitiendo que este se vea modificado en una medida aleatoria por el trigger
CREATE TRIGGER Cuota
ON APUESTAS AFTER INSERT
AS BEGIN
	ALTER TABLE APUESTAS DISABLE TRIGGER IMPEDIR_CAMBIAR_APUESTA

	UPDATE APUESTAS
	SET CUOTA = CUOTA * (RAND() * 2 + 1) FROM APUESTAS
	WHERE APUESTAS.ID IN (SELECT ID FROM inserted)

	ALTER TABLE APUESTAS ENABLE TRIGGER IMPEDIR_CAMBIAR_APUESTA
END
GO

